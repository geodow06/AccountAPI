{"version":3,"sources":["Home.js","SignUp.js","MainRouter.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","Component","SignUp","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","pushRequest","axios","post","state","account","then","r","setState","requestResponse","data","accountNumber","console","log","setStates","event","dummy","firstname","lastname","target","id","value","handleSubmit","preventDefault","onSubmit","type","name","onChange","placeholder","onClick","MainRouter","react_router_dom","to","react_router","exact","path","component","App","src_MainRouter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d83fe164.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Home extends Component {\r\nrender() {\r\n    return (\r\n    <div className=\"App\">\r\n        <header className=\"App-header\">\r\n        <p>tnjrsjtrs</p>\r\n        </header>\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from 'axios';\r\nclass SignUp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          firstname: '',\r\n          lastname: '', \r\n          account:{firstname:'',lastname:''}, \r\n          accountNumber:'',\r\n          requestResponse: ''\r\n        }\r\n      } \r\n      pushRequest=()=>{ \r\n          axios.post(`/createAccount`,this.state.account).then(r => {\r\n              this.setState({requestResponse: r.data})\r\n          }).then(this.setState({accountNumber:this.state.requestResponse.accountNumber})).then(console.log(this.state.accountNumber))\r\n\r\n      } \r\n      \r\n      setStates = (event) => {\r\n\r\nconst dummy = {\r\n    firstname : this.state.account.firstname,\r\n    lastname : this.state.account.lastname\r\n};\r\n\r\n\r\nif (event.target.id === \"Firstname\"){\r\n    dummy.firstname = event.target.value;\r\n}\r\nif (event.target.id === \"Lastname\"){\r\n    dummy.lastname = event.target.value;\r\n}\r\nthis.setState({account:dummy});\r\n      \r\n      \r\n        \r\n\r\n      }\r\n      \r\n      handleSubmit = (event) => {\r\n        event.preventDefault();\r\n      }\r\n   \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <p>{this.state.account.firstname}</p>\r\n      <p>{this.state.account.lastname}</p>\r\n        <form onSubmit={this.handleSubmit} className=\"form-inline\">\r\n          <label className=\"required\"></label>\r\n          <label>\r\n            <input type=\"text\" name='firstname' target='one' className=\"form-control inputArea\" onChange={this.setStates} id=\"Firstname\" placeholder=\"firstname *\"></input>\r\n            <input type=\"text\" name='lastname' target='two' className=\"form-control inputArea\" onChange={this.setStates}  id=\"Lastname\" placeholder=\"lastname *\"></input>\r\n          </label>\r\n          <input type=\"submit\" value=\"Submit\" onClick={this.pushRequest} />\r\n        </form> \r\n       \r\n         \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'; \r\nimport Home from './Home.js'; \r\nimport SignUp from './SignUp';\r\nimport './App.css';\r\nclass MainRouter extends Component{\r\n   render(){ \r\n    return(  \r\n        <div> \r\n            <Router> \r\n                <NavLink to=\"/\">Home</NavLink> \r\n                <NavLink to=\"/SignUp\">SignUp</NavLink>\r\n                <Route exact path=\"/\" component={Home}/>\r\n                <Route path=\"/SignUp\" component={SignUp}/>\r\n            </Router>\r\n        </div>\r\n    );\r\n  \r\n   }\r\n    \r\n} \r\nexport default MainRouter;","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\";\nimport MainRouter from './MainRouter';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <MainRouter/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}